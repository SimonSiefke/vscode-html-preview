name:
only text node

input: 
hello world

expectedOutput:
hello world

name: 
only element node

input: 
<h1></h1>

expectedOutput:
<h1 data-id="1"></h1>

name: 
comments before doctype

input: 
<!-- ## Introduction -->
<!doctype html>
<html ⚡>
</html>

expectedOutput:
<!-- ## Introduction -->
<!doctype html>
<html data-id="5" ⚡>
</html>

name: 
only self-closing element node

input: 
<br>

expectedOutput:
<br data-id="1">

name: 
multiple element nodes and text nodes #1

input: 
<h1>hello</h1>world

expectedOutput:
<h1 data-id="1">hello</h1>world

name: 
multiple element nodes and text nodes #1

input: 
<h1>hello</h1>world
<h2>!!!</h2>

expectedOutput:
<h1 data-id="1">hello</h1>world
<h2 data-id="4">!!!</h2>

name: 
with !DOCTYPE

input: 
<!DOCTYPE html>
<html>
  <h1>hello</h1>
</html>

expectedOutput:
<!DOCTYPE html>
<html data-id="3">
  <h1 data-id="5">hello</h1>
</html>

name: 
with !doctype

input: 
<!doctype html>
<html>
  <h1>hello</h1>
</html>

expectedOutput:
<!doctype html>
<html data-id="3">
  <h1 data-id="5">hello</h1>
</html>

name: 
example amp

input:
<!-- ## Introduction -->
<!--
This is a sample showing how to implement client-side filtering.
-->
<!-- -->
<!doctype html>
<html ⚡>
<head>
  <meta charset="utf-8">
  <script async src="https://cdn.ampproject.org/v0.js"></script>

  <!-- ## Setup -->
  <!--
    Additionally used AMP components must be imported in the header. We use `amp-bind` to store products locally into a variable.
  -->
  <script async custom-element="amp-bind" src="https://cdn.ampproject.org/v0/amp-bind-0.1.js"></script>
  <!--
    We use `amp-list` to retrieve static data.
  -->
  <script async custom-element="amp-list" src="https://cdn.ampproject.org/v0/amp-list-0.1.js"></script>
  <!--
    We use `amp-mustache` to render data.
  -->
  <script async custom-template="amp-mustache" src="https://cdn.ampproject.org/v0/amp-mustache-0.2.js"></script>

  <link rel="canonical" href="https://amp.dev/documentation/examples/interactivity-dynamic-content/client-side_filtering/index.html">
  <title>Client-side filtering</title>

  <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">

  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>

</head>
<body>
  <!--
    ## Client-side Filter

    It is possible to implement client-side filtering by using `amp-list`, `amp-state` and `amp-bind`.

    The `amp-state` is initially setup with data from an endpoint which returns a list of available products; the user can choose between different colors and that selection sets the variable `filteredProducts` to the result of a filter expression. The filter expression is an `amp-bind` expression which uses the `Array.filter` function.

    The `filteredProducts` variable is then used as `src` of `amp-list`. `amp-list` does not resize automatically, but it is possible to calculate its height in the filtered state by using `amp-bind`: here we are binding the `[height]` to the length of the `filteredProducts` array times the height of a single element.

    The alternative to this approach is using server-side filtering which we explain in the [product sample](https://amp.dev/documentation/examples/e-commerce/product_browse_page/).
  -->
  <div>
    <amp-state id="allProducts" src="/static/samples/json/related_products.json"></amp-state>
    <select on="change:AMP.setState({
        filteredProducts: allProducts.items.filter(a => event.value == 'all' ? true : a.color == event.value)
      })">
      <option value="all" selected="">All</option>
      <option value="red">red</option>
      <option value="green">green</option>
      <option value="yellow">yellow</option>
      <option value="orange">orange</option>
    </select>
    <amp-list height="282" [height]="(40 + 24) * filteredProducts.length" layout="fixed-height" src="/static/samples/json/related_products.json" [src]="filteredProducts" binding="no">
      <template type="amp-mustache">
        <amp-img src="{{img}}" layout="fixed" width="60" height="40" alt="{{name}}"></amp-img>
        {{name}}
      </template>
    </amp-list>
  </div>

</body>
</html>

expectedOutput:
<!-- ## Introduction -->
<!--
This is a sample showing how to implement client-side filtering.
-->
<!-- -->
<!doctype html>
<html data-id="9" ⚡>
<head data-id="11">
  <meta data-id="13" charset="utf-8">
  <script data-id="15" async src="https://cdn.ampproject.org/v0.js"></script>

  <!-- ## Setup -->
  <!--
    Additionally used AMP components must be imported in the header. We use `amp-bind` to store products locally into a variable.
  -->
  <script data-id="21" async custom-element="amp-bind" src="https://cdn.ampproject.org/v0/amp-bind-0.1.js"></script>
  <!--
    We use `amp-list` to retrieve static data.
  -->
  <script data-id="25" async custom-element="amp-list" src="https://cdn.ampproject.org/v0/amp-list-0.1.js"></script>
  <!--
    We use `amp-mustache` to render data.
  -->
  <script data-id="29" async custom-template="amp-mustache" src="https://cdn.ampproject.org/v0/amp-mustache-0.2.js"></script>

  <link data-id="31" rel="canonical" href="https://amp.dev/documentation/examples/interactivity-dynamic-content/client-side_filtering/index.html">
  <title data-id="33">Client-side filtering</title>

  <meta data-id="36" name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">

  <style data-id="38" amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript data-id="40"><style data-id="41" amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>

</head>
<body data-id="45">
  <!--
    ## Client-side Filter

    It is possible to implement client-side filtering by using `amp-list`, `amp-state` and `amp-bind`.

    The `amp-state` is initially setup with data from an endpoint which returns a list of available products; the user can choose between different colors and that selection sets the variable `filteredProducts` to the result of a filter expression. The filter expression is an `amp-bind` expression which uses the `Array.filter` function.

    The `filteredProducts` variable is then used as `src` of `amp-list`. `amp-list` does not resize automatically, but it is possible to calculate its height in the filtered state by using `amp-bind`: here we are binding the `[height]` to the length of the `filteredProducts` array times the height of a single element.

    The alternative to this approach is using server-side filtering which we explain in the [product sample](https://amp.dev/documentation/examples/e-commerce/product_browse_page/).
  -->
  <div data-id="49">
    <amp-state data-id="51" id="allProducts" src="/static/samples/json/related_products.json"></amp-state>
    <select data-id="53" on="change:AMP.setState({
        filteredProducts: allProducts.items.filter(a => event.value == 'all' ? true : a.color == event.value)
      })">
      <option data-id="55" value="all" selected="">All</option>
      <option data-id="58" value="red">red</option>
      <option data-id="61" value="green">green</option>
      <option data-id="64" value="yellow">yellow</option>
      <option data-id="67" value="orange">orange</option>
    </select>
    <amp-list data-id="71" height="282" [height]="(40 + 24) * filteredProducts.length" layout="fixed-height" src="/static/samples/json/related_products.json" [src]="filteredProducts" binding="no">
      <template data-id="73" type="amp-mustache">
        <amp-img data-id="75" src="{{img}}" layout="fixed" width="60" height="40" alt="{{name}}"></amp-img>
        {{name}}
      </template>
    </amp-list>
  </div>

</body>
</html>

name:
example html5 boilerplate

input:
<!doctype html>
<html class="no-js" lang="">

<head>
  <meta charset="utf-8">
  <title></title>
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="manifest" href="site.webmanifest">
  <link rel="apple-touch-icon" href="icon.png">
  <!-- Place favicon.ico in the root directory -->

  <link rel="stylesheet" href="css/normalize.css">
  <link rel="stylesheet" href="css/main.css">

  <meta name="theme-color" content="#fafafa">
</head>

<body>
  <!--[if IE]>
    <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</p>
  <![endif]-->

  <!-- Add your site or application content here -->
  <p>Hello world! This is HTML5 Boilerplate.</p>
  <script src="js/vendor/modernizr-3.7.1.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
  <script>window.jQuery || document.write('<script src="js/vendor/jquery-3.4.1.min.js"><\/script>')</script>
  <script src="js/plugins.js"></script>
  <script src="js/main.js"></script>

  <!-- Google Analytics: change UA-XXXXX-Y to be your site's ID. -->
  <script>
    window.ga = function () { ga.q.push(arguments) }; ga.q = []; ga.l = +new Date;
    ga('create', 'UA-XXXXX-Y', 'auto'); ga('set','transport','beacon'); ga('send', 'pageview')
  </script>
  <script src="https://www.google-analytics.com/analytics.js" async></script>
</body>

</html>

expectedOutput: 
<!doctype html>
<html data-id="3" class="no-js" lang="">

<head data-id="5">
  <meta data-id="7" charset="utf-8">
  <title data-id="9"></title>
  <meta data-id="11" name="description" content="">
  <meta data-id="13" name="viewport" content="width=device-width, initial-scale=1">

  <link data-id="15" rel="manifest" href="site.webmanifest">
  <link data-id="17" rel="apple-touch-icon" href="icon.png">
  <!-- Place favicon.ico in the root directory -->

  <link data-id="21" rel="stylesheet" href="css/normalize.css">
  <link data-id="23" rel="stylesheet" href="css/main.css">

  <meta data-id="25" name="theme-color" content="#fafafa">
</head>

<body data-id="28">
  <!--[if IE]>
    <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</p>
  <![endif]-->

  <!-- Add your site or application content here -->
  <p data-id="34">Hello world! This is HTML5 Boilerplate.</p>
  <script data-id="37" src="js/vendor/modernizr-3.7.1.min.js"></script>
  <script data-id="39" src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
  <script data-id="41">window.jQuery || document.write('<script src="js/vendor/jquery-3.4.1.min.js"><\\/script>')</script>
  <script data-id="44" src="js/plugins.js"></script>
  <script data-id="46" src="js/main.js"></script>

  <!-- Google Analytics: change UA-XXXXX-Y to be your site's ID. -->
  <script data-id="50">
    window.ga = function () { ga.q.push(arguments) }; ga.q = []; ga.l = +new Date;
    ga('create', 'UA-XXXXX-Y', 'auto'); ga('set','transport','beacon'); ga('send', 'pageview')
  </script>
  <script data-id="53" src="https://www.google-analytics.com/analytics.js" async></script>
</body>

</html>
